{
  "name": "cylon",
  "version": "0.7.0",
  "main": "dist/cylon.js",
  "description": "A JavaScript robotics framework using Node.js",
  "homepage": "http://cylonjs.com",
  "bugs": "https://github.com/hybridgroup/cylon/issues",
  "author": {
    "name": "Ron Evans, Andrew Stewart, Edgar Silva, Mario 'Kuroir' Ricalde, Gize Bonilla, Adrian Zankich",
    "email": "cylonjs@hybridgroup.com",
    "url": "http://hybridgroup.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hybridgroup/cylon"
  },
  "licenses": [
    {
      "type": "Apache 2.0"
    }
  ],
  "bin": {
    "cylon": "./bin/cylon"
  },
  "devDependencies": {
    "matchdep": "~0.1.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.5.0",
    "grunt-contrib-coffee": "~0.7.0",
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-clean": "~0.5.0",
    "sinon-chai": "~2.4.0",
    "chai": "~1.7.2",
    "mocha": "~1.12.1",
    "sinon": "~1.7.3"
  },
  "dependencies": {
    "async": "~0.2.9",
    "node-namespace": "~1.0.0",
    "express.io": "~1.1.13",
    "wrench": "~1.5.4",
    "glob": "~3.2.7",
    "ejs": "~0.8.5",
    "commander": "~2.1.0"
  },
  "readme": "# Cylon.js\n\nCylon.js (http://cylonjs.com) is a JavaScript framework for robotics and physical computing using Node.js.\n\nIt provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.\n\nWant to use Ruby on robots? Check out our sister project Artoo (http://artoo.io).\n\nWant to use the Go programming language to power your robots? Check out our sister project Gobot (http://gobot.io).\n\n[![Build Status](https://secure.travis-ci.org/hybridgroup/cylon.png?branch=master)](http://travis-ci.org/hybridgroup/cylon)\n\n## Getting Started\n\nAll you need to get started is the `cylon` module:\n\n    npm install cylon\n\nThen install modules for whatever hardware support you want to use from your robot. For the example below, an Arduino using the Firmata protocol:\n\n    npm install cylon-firmata\n\n## Examples\n\nThe example below connects to an Arduino, and every second turns the LED either on, or off. \n\nThe example requires that the Arduino has the Firmata sketch installed, and that it is connected on the port `/dev/ttyACM0`. You need to install Firmata on your Arduino, and to change the `port` parameter to match the port that your system is actually using.\n\nMake sure to upload the \"Standard Firmata\" sketch or an equivalent Firmata sketch to your Arduino first. Without that code running on the Arduino, Firmata can't communicate with Cylon. You can find the example sketch in your Arduino software under \"Examples > Firmata > StandardFirmata\".\n\n### JavaScript:\n\n```javascript\nvar Cylon = require(\"cylon\");\n\n// Initialize the robot\nvar robot = Cylon.robot({\n  // Change the port to the correct port for your Arduino.\n  connection: { name: 'arduino', adaptor: 'firmata', port: '/dev/ttyACM0' },\n  device: { name: 'led', driver: 'led', pin: 13 },\n\n  work: function(my) {\n    // we do our thing here\n    every((1).second(), function() { my.led.toggle(); });\n  }\n});\n\n// start working\nrobot.start();\n```\n\n### CoffeeScript:\n\n```\nCylon = require \"cylon\"\n\n# Initialize the robot\nrobot = Cylon.robot\n  connection:\n    name: 'arduino', adaptor: 'firmata', port: '/dev/ttyACM0'\n\n  device:\n    name: 'led', driver: 'led', pin: 13\n\n  work: (my) ->\n    # we do our thing here\n    every 1.second(), -> my.led.toggle()\n\nrobot.start()\n```\n\n**Note:** before running any examples in the `examples/` dir from source, make sure to compile using `grunt coffee` first.\n\n## Hardware Support\n\nCylon.js has a extensible system for connecting to hardware devices. The following robotics, physical computing, or software platforms are currently supported:\n\n- [Ardrone](http://ardrone2.parrot.com/) <==> [Adaptor/Drivers](https://github.com/hybridgroup/cylon-ardrone)\n- [Arduino](http://www.arduino.cc/) <==> [Adaptor](https://github.com/hybridgroup/cylon-firmata)\n- [Beaglebone Black](http://beagleboard.org/Products/BeagleBone+Black/) <==> [Adaptor](https://github.com/hybridgroup/cylon-beaglebone)\n- [Crazyflie](http://www.bitcraze.se/) <==> [Adaptor/Driver](https://github.com/hybridgroup/cylon-crazyflie)\n- [Leap Motion](https://www.leapmotion.com/) <==> [Adaptor/Driver](https://github.com/hybridgroup/cylon-leapmotion)\n- [Pebble](http://www.getpebble.com/) <==> [Adaptor/Driver](https://github.com/hybridgroup/cylon-pebble)\n- [Raspberry Pi](http://www.raspberrypi.org/) <==> [Adaptor](https://github.com/hybridgroup/cylon-raspi)\n- [Salesforce](http://www.force.com/) <==> [Adaptor/Driver](https://github.com/hybridgroup/cylon-force)\n- [Spark](http://www.spark.io/) <==> [Adaptor](https://github.com/hybridgroup/cylon-spark)\n- [Sphero](http://www.gosphero.com/) <==> [Adaptor/Driver](https://github.com/hybridgroup/cylon-sphero)\n\nSupport for many devices that use General Purpose Input/Output (GPIO) have\na shared set of drivers provded using the cylon-gpio module:\n\n  - [GPIO](https://en.wikipedia.org/wiki/General_Purpose_Input/Output) <=> [Drivers](https://github.com/hybridgroup/cylon-gpio)\n    - Analog Sensor\n    - Button\n    - LED\n    - Motor\n    - Maxbotix Ultrasonic Range Finder\n    - Servo\n\nSupport for devices that use Inter-Integrated Circuit (I2C) have a shared set of\ndrivers provded using the cylon-i2c module:\n\n  - [I2C](https://en.wikipedia.org/wiki/I%C2%B2C) <=> [Drivers](https://github.com/hybridgroup/cylon-i2c)\n    - BlinkM\n    - HMC6352 Digital Compass\n\nMore platforms and drivers are coming soon...\n\n## CLI\n\nCylon has a Command Line Interface (CLI) so you can access important features\nright from the command line.\n\n    Usage: cylon [command] [options]\n\n    Commands:\n\n      generate <name>        Generates a new adaptor\n\n    Options:\n\n      -h, --help     output usage information\n      -V, --version  output the version number\n\n### Generator\n\nWant to integrate a hardware device we don't have Cylon support for yet? There's\na generator for that!\n\nYou can easily generate a new skeleton Cylon adaptor to\nhelp you get started. Simply run the `cylon generate` command, and the\ngenerator will create a new directory with all of the files in place for your\nnew adaptor module.\n\n    $ cylon generate awesome_device\n    Creating cylon-awesome_device adaptor.\n    Compiling templates.\n\n    $ ls ./cylon-awesome_device\n    Gruntfile.js\n    LICENSE\n    README.md\n    dist/\n    package.json\n    src/\n    test/\n\n## Documentation\n\nWe're busy adding documentation to our web site at http://cylonjs.com/ please check there as we continue to work on Cylon.js\n\nIf you want to help us with some documentation on the site, you can go to [cylonjs.com branch](https://github.com/hybridgroup/cylon/tree/cylonjs.com) and then, follow the instructions.\n\nThank you!\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n[![NPM](https://nodei.co/npm/cylon.png?compact=true)](https://nodei.co/npm/cylon/) \n\nVersion 0.6.0 - API exposes robot commands, fixes issues in driver/adaptor init\n\nVersion 0.5.0 - Improve API, add GPIO support for reuse in adaptors \n\nVersion 0.4.0 - Refactor proxy in Cylon.Basestar, improve API\n\nVersion 0.3.0 - Improved Cylon.Basestar, and added API\n\nVersion 0.2.0 - Cylon.Basestar to help develop external adaptors/drivers\n\nVersion 0.1.0 - Initial release for ongoing development\n\n## License\n\nCopyright (c) 2013 The Hybrid Group. Licensed under the Apache 2.0 license.\n",
  "readmeFilename": "README.md",
  "_id": "cylon@0.7.0",
  "dist": {
    "shasum": "aac81c94be7a9bfbf77519f3f8f85637f23e13ca"
  },
  "_from": "cylon@",
  "_resolved": "https://registry.npmjs.org/cylon/-/cylon-0.7.0.tgz"
}
