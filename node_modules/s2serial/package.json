{
  "name": "s2serial",
  "version": "0.1.1",
  "description": "Streams2 frontend for node-serialport",
  "main": "index.js",
  "scripts": {
    "test": "nodeunit ./test/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mharsch/node-s2serial.git"
  },
  "keywords": [
    "serialport",
    "serial"
  ],
  "dependencies": {
    "serialport": ">=1.1.1"
  },
  "devDependencies": {
    "nodeunit": ">=0.7.4"
  },
  "author": {
    "name": "Michael Harsch",
    "url": "mike@harschsystems.com"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mharsch/node-s2serial/issues"
  },
  "readme": "#s2serial\n\nA Streams2 frontend for\n[node-serialport](https://github.com/voodootikigod/node-serialport).\n\n##Usage:\n\nThe S2Serial implements the same API as node-serialport except: \n\n* The `parser` option is ignored (forcing `raw` mode)\n* The returned object implements a \n[Duplex Stream](http://nodejs.org/api/stream.html#stream_class_stream_duplex)\n\n\n##Example:\n\n\tvar S2Serial = require('s2serial').S2Serial;\n\tvar sp = new S2Serial('/dev/tty.usb411', {baudrate: 57600});\n\n\t// hypothetical Streams that implement some protocol\n\tvar encoder = new MyEncoder(); // encodes command objs into bytes\n\tvar decoder = new MyDecoder(); // parses stream of bytes and emits objs\n\n\tsp.pipe(decoder);\n\tdecoder.on('message', function (msg) {\n\t\tconsole.log('message received from serialport: ' + msg);\n\t});\n\n\tsp.on('open', function () {\n\t\tencoder.pipe(sp);\n\t\tencoder.send({ cmd: 'getsomething' });\n\t});\n",
  "_id": "s2serial@0.1.1",
  "dist": {
    "shasum": "71466daa6ebc3bc54e50da97a63ef134ce5c797c"
  },
  "_from": "s2serial@>=0.1.1",
  "_resolved": "https://registry.npmjs.org/s2serial/-/s2serial-0.1.1.tgz"
}
